/*Decimal to binary conversion*/
#include <iostream>
#include <cmath>
using namespace std;

int decimalToBinaryMethod1(int number)
{
    int binaryNumber = 0;
    int i = 0;
    while(number > 0)
    {
        int bit = number % 2;
        binaryNumber = bit * pow(10, i) + binaryNumber;
        i++;
        number = number/2;
    }
    return binaryNumber;
}
int decimalToBinaryMethod2(int num)
{
  int binaryNum = 0, i = 0;
  while(num)
  {
    int bit = (num&1);
    binaryNum =  bit * pow(10, i++) + binaryNum;
    num = num >> 1;
  }
  return binaryNum;
}
int main()
{
    int num;
    cout << "Enter a number" <<endl;
    cin >> num;
    int binaryNum = decimalToBinaryMethod2(num);
    cout << binaryNum <<endl;
}
_________________________________________________________________________________%%________________________________________________________________________________________________________________________________________
// Binary to decimal conversion
#include <bits/stdc++.h>
using namespace std;

int binaryToDecimalMethod1(int num)
{
  int decimal = 0;
  int i = 0;
  while(num)
  {
      int bit = num % 10;
      decimal = bit * pow(2, i++) + decimal;
      num = num / 10;
  }
  return decimal;
}
int binaryToDecimalMethod2(int num)
{
  
}
int main() {
  int num;
  cin >> num;
  int decimalNum = binaryToDecimalMethod1(num);
  cout << decimalNum <<endl; 
}
_________________________________________________________________________________________________
// MULTIPLY N NUMBERS ENTERED BY USER
#include <iostream>
using namespace std;

int main()
{
  int n, num, product = 1;
  cout << "Enter value for n" <<endl;
  cin >> n;
  for(int i = 0; i < n; i++)
  {
       cout << "Enter number : " << (i+1) << endl;
       cin >> num;
       product *= num;
  }
  cout << "Product = " << product <<endl;
  
}
====================================================================================================
// Pattern -- hollow rectangle
#include <iostream>
using namespace std;

int main()
{
      // outer loop
     for(int row = 0; row < 5; row++)
     {
          for(int col = 0; col < 5; col++)
          {    
              // if zeroth row or last row then print star
              if(row == 0 || row  == 4)
          // inner loop
              {
                cout << "* ";
              }
              else
              {
                if(col == 0 || col == 4)
                {
                  cout << "* ";
                }
                else
                {
                  cout << "  ";
                }
              }
          }  
          cout << endl;
     }
}

 //Half pyramid
void pattern(int num)
{
  
      for(int row = 0; row < num; row++)
      {
        for(int col = 0; col <=  row; col++)
        {
          cout << "* ";
        }
        cout << endl;
      }
}

//Inverted half pyramid
void pattern(int num)
{
   
      for(int row = 0; row < num; row++)
      {
           for(int col = num; col > row; col--)
           {
             cout << "* ";
           }
           cout << endl;
      }
}

//Numeric half pyramid
void pattern(int num)
{
   for(int row = 0; row < num; row++)
    {
      for(int col = 0; col < row + 1; col++)
      {
            cout << col+1 << " ";
      }
      cout << endl;
    }
}
=========================================================================================
// Hollow Inverted half pyramid
void pattern(int num)
{
   for(int i = 0; i < num; i++)
   {
         for(int j = 0; j < num; j++)
         {
             if(i == 0 || j == 0 || j == num - i - 1)
             {
               cout << "* ";
             }
             else
             {
               cout << "  ";
             }
         }
         cout << endl;
   }
}
=========================================================================================
